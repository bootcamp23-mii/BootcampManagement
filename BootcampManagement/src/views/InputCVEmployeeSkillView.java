/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import controllers.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.EmployeeSkill;
import models.Skill;
import org.hibernate.SessionFactory;
import tools.*;

/**
 *
 * @author FES
 */
public class InputCVEmployeeSkillView extends javax.swing.JInternalFrame {

    private SessionFactory factory = HibernateUtil.getSessionFactory();
    private EmployeeSkillControllerInterface c = new EmployeeSkillController(factory);
    private SkillControllerInterface cs = new SkillController(factory);
    
    private DefaultTableModel tableModel;
    private List<models.Skill> skillList = new ArrayList<>();
    private static String tempID;
    
    /**
     * Creates new form InputCVEmployeeSkillView
     */
    public InputCVEmployeeSkillView() {
        initComponents();
        setDefaultCondition();
    }

    private void setDefaultCondition(){
        showAllTable(c.searchWD(Session.getSession()));
        getSkillList();
        setComboBox();
        clean();
    }

    private void showAllTable(List<EmployeeSkill> dataList){
        Object[] columnNames = {"Nomor", "Skill","Category"};
        Object[][] data = new Object[dataList.size()][columnNames.length];
        for (int i = 0; i < data.length; i++) {
            try {
                data[i][0] = (i + 1);
                data[i][1] = dataList.get(i).getSkill().getName();
                data[i][2] = dataList.get(i).getSkill().getCategory().getName();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        tableModel = new DefaultTableModel(data, columnNames);
        tbEmpSkill.setModel(tableModel);
    }
    
    private void getSkillList(){
        for (Skill data : cs.getAll()) {
            skillList.add(data);
        }
    }
    
    private void setComboBox(){
        for (Skill data : skillList) {
            cbEmployeeSkill.addItem(data.getName()+"("+data.getCategory().getName()+")");
        }
    }
    
    private void clean(){
        cbEmployeeSkill.setSelectedIndex(0);
        tempID="";
    }
    
    private boolean entryCheck() {
        try {
            if (cbEmployeeSkill.getSelectedIndex()==0
                    )
            {
                JOptionPane.showMessageDialog(null, "Incorrect data entry!");
                return false;
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Incorrect data entry!");
            return false;
        }
        return true;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnMain = new javax.swing.JPanel();
        pnMTop = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pnMTRCenter = new javax.swing.JPanel();
        pnMTRC1 = new javax.swing.JPanel();
        lblEmployeeSkill = new javax.swing.JLabel();
        cbEmployeeSkill = new javax.swing.JComboBox<>();
        pnMTRC2 = new javax.swing.JPanel();
        btSave = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btClear = new javax.swing.JButton();
        pnMTRC3 = new javax.swing.JPanel();
        spcEmpSkill = new javax.swing.JScrollPane();
        tbEmpSkill = new javax.swing.JTable();
        pnMTBottom = new javax.swing.JPanel();
        pnMTRight = new javax.swing.JPanel();
        pnMTLeft = new javax.swing.JPanel();

        setBorder(null);
        setClosable(true);
        setTitle("Employee Skill");
        setFrameIcon(null);

        pnMain.setBackground(new java.awt.Color(204, 255, 255));
        pnMain.setPreferredSize(new java.awt.Dimension(700, 500));
        pnMain.setLayout(new java.awt.BorderLayout(5, 5));

        pnMTop.setBackground(new java.awt.Color(204, 255, 255));
        pnMTop.setPreferredSize(new java.awt.Dimension(700, 50));

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTitle.setText("Employee Skill");

        javax.swing.GroupLayout pnMTopLayout = new javax.swing.GroupLayout(pnMTop);
        pnMTop.setLayout(pnMTopLayout);
        pnMTopLayout.setHorizontalGroup(
            pnMTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 716, Short.MAX_VALUE)
            .addGroup(pnMTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnMTopLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lblTitle)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pnMTopLayout.setVerticalGroup(
            pnMTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
            .addGroup(pnMTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnMTopLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(lblTitle)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pnMain.add(pnMTop, java.awt.BorderLayout.PAGE_START);

        pnMTRCenter.setBackground(new java.awt.Color(204, 255, 255));
        pnMTRCenter.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        pnMTRC1.setBackground(new java.awt.Color(204, 255, 255));
        pnMTRC1.setPreferredSize(new java.awt.Dimension(640, 38));
        pnMTRC1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblEmployeeSkill.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblEmployeeSkill.setText("Employee Skill: ");
        pnMTRC1.add(lblEmployeeSkill);

        cbEmployeeSkill.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cbEmployeeSkill.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        cbEmployeeSkill.setMinimumSize(new java.awt.Dimension(30, 25));
        cbEmployeeSkill.setPreferredSize(new java.awt.Dimension(300, 25));
        pnMTRC1.add(cbEmployeeSkill);

        pnMTRCenter.add(pnMTRC1);

        pnMTRC2.setBackground(new java.awt.Color(204, 255, 255));
        pnMTRC2.setPreferredSize(new java.awt.Dimension(640, 38));
        pnMTRC2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btSave.setText("Save");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });
        pnMTRC2.add(btSave);

        btDelete.setText("Delete");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });
        pnMTRC2.add(btDelete);

        btClear.setText("Clear");
        btClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearActionPerformed(evt);
            }
        });
        pnMTRC2.add(btClear);

        pnMTRCenter.add(pnMTRC2);

        pnMTRC3.setBackground(new java.awt.Color(204, 255, 255));
        pnMTRC3.setPreferredSize(new java.awt.Dimension(640, 300));

        spcEmpSkill.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        spcEmpSkill.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        spcEmpSkill.setPreferredSize(new java.awt.Dimension(640, 280));

        tbEmpSkill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbEmpSkill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbEmpSkillMouseClicked(evt);
            }
        });
        spcEmpSkill.setViewportView(tbEmpSkill);

        pnMTRC3.add(spcEmpSkill);

        pnMTRCenter.add(pnMTRC3);

        pnMain.add(pnMTRCenter, java.awt.BorderLayout.CENTER);

        pnMTBottom.setBackground(new java.awt.Color(204, 255, 255));
        pnMTBottom.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 25, 5));
        pnMain.add(pnMTBottom, java.awt.BorderLayout.PAGE_END);

        pnMTRight.setBackground(new java.awt.Color(204, 255, 255));
        pnMTRight.setPreferredSize(new java.awt.Dimension(20, 390));

        javax.swing.GroupLayout pnMTRightLayout = new javax.swing.GroupLayout(pnMTRight);
        pnMTRight.setLayout(pnMTRightLayout);
        pnMTRightLayout.setHorizontalGroup(
            pnMTRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        pnMTRightLayout.setVerticalGroup(
            pnMTRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );

        pnMain.add(pnMTRight, java.awt.BorderLayout.LINE_END);

        pnMTLeft.setBackground(new java.awt.Color(204, 255, 255));
        pnMTLeft.setPreferredSize(new java.awt.Dimension(20, 390));

        javax.swing.GroupLayout pnMTLeftLayout = new javax.swing.GroupLayout(pnMTLeft);
        pnMTLeft.setLayout(pnMTLeftLayout);
        pnMTLeftLayout.setHorizontalGroup(
            pnMTLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        pnMTLeftLayout.setVerticalGroup(
            pnMTLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );

        pnMain.add(pnMTLeft, java.awt.BorderLayout.LINE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbEmpSkillMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbEmpSkillMouseClicked
        String temp="";
        for (Skill data : skillList) {
            if (data.getName().equals(tbEmpSkill.getValueAt(tbEmpSkill.getSelectedRow(), 1).toString())
                &&data.getCategory().getName().equals(tbEmpSkill.getValueAt(tbEmpSkill.getSelectedRow(), 2).toString())
            )temp=data.getId();
        }
        for (int i = 0; i < cbEmployeeSkill.getItemCount(); i++) {
            if (cbEmployeeSkill.getItemAt(i).equals(tbEmpSkill.getValueAt(tbEmpSkill.getSelectedRow(), 1).toString()+"("+tbEmpSkill.getValueAt(tbEmpSkill.getSelectedRow(), 2).toString()+")"))
            cbEmployeeSkill.setSelectedIndex(i);
        }
        List<EmployeeSkill> dataList=c.searchWD(Session.getSession());
        for (EmployeeSkill data : dataList) {
            if (data.getSkill().getId().equals(temp)
                    )tempID=data.getId();
        }
    }//GEN-LAST:event_tbEmpSkillMouseClicked

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        if (entryCheck()) {
            String temp="";
            for (Skill data : skillList) {
                if (cbEmployeeSkill.getSelectedItem().equals(data.getName()+"("+data.getCategory().getName()+")")
                )temp=data.getId();
            }
            c.save(tempID, Session.getSession(), temp) ;
            showAllTable(c.searchWD(Session.getSession()));
        }
        clean();
    }//GEN-LAST:event_btSaveActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        String temp="";
        for (Skill data : skillList) {
            if (cbEmployeeSkill.getSelectedItem().equals(data.getName()+"("+data.getCategory().getName()+")")
            )temp=data.getId();
        }
        c.deleteSoft("", Session.getSession(), temp);
        showAllTable(c.searchWD(Session.getSession()));
        clean();
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearActionPerformed
        clean();
    }//GEN-LAST:event_btClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClear;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btSave;
    private javax.swing.JComboBox<String> cbEmployeeSkill;
    private javax.swing.JLabel lblEmployeeSkill;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnMTBottom;
    private javax.swing.JPanel pnMTLeft;
    private javax.swing.JPanel pnMTRC1;
    private javax.swing.JPanel pnMTRC2;
    private javax.swing.JPanel pnMTRC3;
    private javax.swing.JPanel pnMTRCenter;
    private javax.swing.JPanel pnMTRight;
    private javax.swing.JPanel pnMTop;
    private javax.swing.JPanel pnMain;
    private javax.swing.JScrollPane spcEmpSkill;
    private javax.swing.JTable tbEmpSkill;
    // End of variables declaration//GEN-END:variables
}
